import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const TOTAL_USERS = 100000;
const TOTAL_POSTS = 100000;

const names = [
  'Jo√£o Silva', 'Maria Santos', 'Pedro Costa', 'Ana Oliveira', 'Carlos Ferreira',
  'Lucia Rodrigues', 'Fernando Alves', 'Patricia Lima', 'Roberto Gomes', 'Juliana Martins',
  'Ricardo Pereira', 'Camila Souza', 'Andre Carvalho', 'Fernanda Ribeiro', 'Marcos Dias',
  'Beatriz Lima', 'Thiago Santos', 'Carolina Costa', 'Rafael Oliveira', 'Isabela Ferreira',
  'Gabriel Rodrigues', 'Mariana Alves', 'Lucas Lima', 'Sofia Gomes', 'Matheus Martins',
  'Valentina Pereira', 'Enzo Souza', 'Alice Carvalho', 'Miguel Ribeiro', 'Helena Dias'
];

const titles = [
  'Como otimizar performance no Next.js',
  'Melhores pr√°ticas de SSR',
  'Guia completo de SEO',
  'T√©cnicas avan√ßadas de caching',
  'Otimiza√ß√£o de imagens na web',
  'Estrat√©gias de lazy loading',
  'Monitoramento de performance',
  'Debugging de aplica√ß√µes React',
  'Arquitetura de micro-frontends',
  'Implementa√ß√£o de PWA',
  'TypeScript para React',
  'Testes automatizados',
  'Deploy em produ√ß√£o',
  'CI/CD pipelines',
  'Monitoramento de erros',
  'Acessibilidade web',
  'Performance mobile',
  'SEO t√©cnico',
  'Analytics avan√ßado',
  'Seguran√ßa em aplica√ß√µes web'
];

const contents = [
  'Este √© um artigo detalhado sobre como otimizar a performance de aplica√ß√µes Next.js...',
  'Server-Side Rendering √© uma t√©cnica poderosa que melhora significativamente a experi√™ncia do usu√°rio...',
  'SEO √© fundamental para o sucesso de qualquer aplica√ß√£o web...',
  'Caching √© uma das estrat√©gias mais eficazes para melhorar performance...',
  'Otimiza√ß√£o de imagens pode reduzir drasticamente o tempo de carregamento...',
  'Lazy loading √© essencial para aplica√ß√µes com muito conte√∫do...',
  'Monitoramento cont√≠nuo √© crucial para manter a performance...',
  'Debugging eficiente pode economizar horas de desenvolvimento...',
  'Micro-frontends oferecem escalabilidade e manutenibilidade...',
  'PWA transforma sua aplica√ß√£o web em uma experi√™ncia nativa...',
  'TypeScript adiciona tipagem est√°tica ao JavaScript...',
  'Testes automatizados garantem qualidade e confiabilidade...',
  'Deploy em produ√ß√£o requer cuidados especiais...',
  'CI/CD automatiza o processo de entrega...',
  'Monitoramento de erros √© essencial em produ√ß√£o...',
  'Acessibilidade torna sua aplica√ß√£o inclusiva...',
  'Performance mobile √© cr√≠tica para o sucesso...',
  'SEO t√©cnico melhora a indexa√ß√£o...',
  'Analytics fornece insights valiosos...',
  'Seguran√ßa deve ser prioridade em qualquer aplica√ß√£o...'
];

const tags = ['Next.js', 'React', 'Performance', 'SEO', 'Caching', 'Optimization', 'Web Development', 'JavaScript', 'TypeScript', 'Frontend', 'Backend', 'Mobile', 'Testing', 'Deployment', 'Security'];

function generateUsers() {
  console.log('Gerando usu√°rios...');
  const users = [];
  
  for (let i = 0; i < TOTAL_USERS; i++) {
    const nameIndex = i % names.length;
    const nameNumber = Math.floor(i / names.length) + 1;
    const name = names[nameIndex] + (nameNumber > 1 ? ` ${nameNumber}` : '');
    
    users.push({
      id: i + 1,
      name: name,
      email: `user${i + 1}@example.com`,
      avatar: `https://picsum.photos/50/50?random=${i + 1}`,
      postsCount: Math.floor(Math.random() * 100) + 1,
      followers: Math.floor(Math.random() * 5000) + 10
    });
  }
  
  return users;
}

function generatePosts(users) {
  console.log('Gerando posts...');
  const posts = [];
  
  for (let i = 0; i < TOTAL_POSTS; i++) {
    const titleIndex = i % titles.length;
    const titleNumber = Math.floor(i / titles.length) + 1;
    const title = titles[titleIndex] + (titleNumber > 1 ? ` - Parte ${titleNumber}` : '');
    
    const contentIndex = i % contents.length;
    const content = contents[contentIndex] + ` Este √© o post n√∫mero ${i + 1} com conte√∫do detalhado sobre o assunto.`;
    
    const postTags = tags.sort(() => 0.5 - Math.random()).slice(0, Math.floor(Math.random() * 4) + 2);
    
    const randomUserIndex = Math.floor(Math.random() * users.length);
    const author = users[randomUserIndex];
    
    posts.push({
      id: i + 1,
      title: title,
      content: content,
      author: author,
      createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),
      likes: Math.floor(Math.random() * 1000) + 10,
      comments: [],
      tags: postTags,
      readTime: Math.floor(Math.random() * 20) + 3
    });
  }
  
  return posts;
}

function generateAnalytics(posts, users) {
  console.log('Gerando analytics...');
  
  const totalLikes = posts.reduce((sum, post) => sum + post.likes, 0);
  const totalComments = posts.reduce((sum, post) => sum + (post.comments?.length || 0), 0);
  
  const allTags = posts.flatMap(post => post.tags);
  const tagCounts = allTags.reduce((acc, tag) => {
    acc[tag] = (acc[tag] || 0) + 1;
    return acc;
  }, {});
  
  const topTags = Object.entries(tagCounts)
    .map(([tag, count]) => ({ tag, count }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 10);

  const recentActivity = posts
    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
    .slice(0, 20)
    .map(post => `${post.author.name} publicou "${post.title}"`);

  return {
    totalPosts: posts.length,
    totalUsers: users.length,
    totalComments,
    averageLikes: Math.round(totalLikes / posts.length),
    averageComments: Math.round(totalComments / posts.length),
    topTags,
    recentActivity
  };
}

async function generateData() {
  console.log('üöÄ Iniciando gera√ß√£o de dados massivos...');
  
  const startTime = Date.now();
  
  const users = generateUsers();
  const posts = generatePosts(users);
  const analytics = generateAnalytics(posts, users);
  
  const dataDir = path.join(__dirname, '..', 'src', 'app', 'ssr-demo', 'data');
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }
  
  console.log('Salvando arquivos...');
  
  fs.writeFileSync(
    path.join(dataDir, 'users.json'),
    JSON.stringify(users, null, 2)
  );
  
  fs.writeFileSync(
    path.join(dataDir, 'posts.json'),
    JSON.stringify(posts, null, 2)
  );
  
  fs.writeFileSync(
    path.join(dataDir, 'analytics.json'),
    JSON.stringify(analytics, null, 2)
  );
  
  const endTime = Date.now();
  const duration = (endTime - startTime) / 1000;
  
  console.log('‚úÖ Dados gerados com sucesso!');
  console.log(`üìä Estat√≠sticas:`);
  console.log(`   - ${users.length.toLocaleString()} usu√°rios`);
  console.log(`   - ${posts.length.toLocaleString()} posts`);
  console.log(`   - ${analytics.totalComments.toLocaleString()} coment√°rios`);
  console.log(`   - ${analytics.averageLikes.toLocaleString()} likes m√©dios`);
  console.log(`‚è±Ô∏è  Tempo de gera√ß√£o: ${duration.toFixed(2)}s`);
  console.log(`üìÅ Arquivos salvos em: ${dataDir}`);
}

generateData().catch(console.error); 